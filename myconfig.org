#+TITLE: emacs config
#+AUTHOR: Martin

* Preferences  
#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
  (setq inhibit-startup-screen t)
  (setq-default indent-tabs-mode nil)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<s-up>") 'toggle-frame-fullscreen)
  (show-paren-mode)
  (use-package challenger-deep-theme :ensure t)
  (use-package undo-tree :ensure t :init (global-undo-tree-mode t))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   ("C-c b" . org-iswitchb))
    :init (setq org-directory "~/orgfiles"
                org-default-notes-file (concat org-directory "/notes.org")
                org-capture-templates '(("t" "Task" entry (file+headline "~/orgfiles/todo.org" "Tasks")
                                         "* TODO %?\n  %i\n  %a")
                                        ("e" "Calendar Event" entry (file "~/orgfiles/gcal.org")
                                         "* %?\n\n%^T\n\n")
                                        ("o" "Trello Card" entry (file "~/orgfiles/trello.org")
                                         "* To-Do %?\n %i\n %a"))))
  (use-package org-trello :ensure t :defer t
    :init (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))
    :config (setq org-trello-current-prefix-keybinding "C-c o"))
#+END_SRC
* Git Integration
  Magit and magithub.
#+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t :bind (("C-x g" . magit-status)))
  (use-package magithub :after magit :config (magithub-feature-autoinject t))
#+END_SRC
* Coding
** PHP
   php-mode, php-auto-yasnippets, php-refactor-mode are the most useful ones in this code block.
#+BEGIN_SRC emacs-lisp
   (use-package php-mode :defer t :ensure t :mode "\\.php$"
     :config
     (add-to-list 'company-backends '(company-gtags php-extras-company company-keywords company-abbrev company-files))
     (setq php-mode-coding-style 'psr2)
     (php-eldoc-enable))
   (use-package php-auto-yasnippets :defer t :ensure t :after php-mode
     :bind (:map php-mode-map ("C-c C-y" . yas/create-php-snippet)))
   (use-package php-refactor-mode :defer t :init (add-hook 'php-mode-hook #'php-refactor-mode))
   (use-package phpcbf :defer t :ensure t :config (setq phpcbf-standard 'PSR2))
   (use-package phpunit :ensure t :defer t)
   (use-package ggtags :defer t :ensure t :init (add-hook 'php-mode-hook #'ggtags-mode))
   (use-package php-boris :defer t)
   (use-package phan :defer t)
   (use-package fluca-php :load-path "site-lisp/")
#+END_SRC
** Javascript
   js2-mode, js-comint and tern.
#+BEGIN_SRC emacs-lisp
  (use-package tern :ensure t :defer t :init (add-hook 'js2-mode-hook #'tern-mode))
  (use-package company-tern :ensure t :defer t :after tern :config (add-to-list 'company-backends 'company-tern))
  (use-package js2-mode :ensure t :defer t :mode "\\.js\\'" :interpreter "node" :config (setq js2-basic-offset 2))
  (use-package js-comint :ensure t :defer t :after js2-mode
    :bind (:map js2-mode-map
                ("C-x C-e" . js-send-last-sexp)
                ("C-M-x" . js-send-last-sexp-and-go)
                ("C-c C-b" . js-send-buffer-and-go)
                ("C-c l" . js-load-file-and-go)))
#+END_SRC
** Python
   Elpy is good to me.
   #+BEGIN_SRC emacs-lisp
     (use-package elpy :defer t :ensure t
       :init
       (elpy-enable)
       (setq elpy-rpc-python-command "python3")
       (setq python-shell-interpreter "python3"))
   #+END_SRC
* Useful Packages
#+BEGIN_SRC emacs-lisp
  ;; Company
  (use-package company :ensure t
    :config
    (global-company-mode)
    (setq company-dabbrev-downcase nil))
  ;; Flycheck
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    :config
    (setq sentence-end-double-space nil)
    (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  (use-package column-enforce-mode :defer t :ensure t :after php-mode)
  (use-package eldoc :config (global-eldoc-mode))
  (use-package json-mode :ensure t :defer t)
  (use-package csv-mode :ensure t :defer t)
  (use-package markdown-mode :ensure t :defer t )
#+END_SRC
