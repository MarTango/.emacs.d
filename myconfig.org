#+TITLE: emacs config
#+AUTHOR: Martin

* Coding
** HTML
   #+BEGIN_SRC emacs-lisp
     (use-package web-mode :ensure t :defer t
       :config (setq web-mode-code-indent-offset 2) (setq web-mode-markup-indent-offset 2)
       :mode "\\.html?\\'")
     (use-package emmet-mode :ensure t
       :init (add-hook 'web-mode-hook #'emmet-mode)
       :config
       (add-hook 'sgml-mode-hook #'emmet-mode)
       (add-hook 'css-mode-hook #'emmet-mode)
       )
   #+END_SRC
** PHP
   php-mode is the major mode for editing PHP files.
   #+BEGIN_SRC emacs-lisp
   (use-package php-mode :defer t :ensure t :mode "\\.php$"
     :init
     (add-hook 'php-mode-hook (lambda() (add-to-list 'company-backends '(company-gtags php-extras-company))))
     :config
     (setq php-mode-coding-style 'psr2)
     (php-eldoc-enable))   
   #+END_SRC

   Use company and gtags for completion, with php functions provided by php-extras, snippets provided by php-auto-yasnippets and documentation provided by php-eldoc.
   #+BEGIN_SRC emacs-lisp
     (use-package php-extras :defer t :ensure t :after php-mode)   
     (use-package php-auto-yasnippets :defer t :ensure t :after php-mode
       :bind (:map php-mode-map ("C-c C-y" . yas/create-php-snippet)))
     (use-package php-eldoc :defer t :ensure t :after php-mode)
     (use-package ggtags :defer t :ensure t :init (add-hook 'php-mode-hook #'ggtags-mode))
   #+END_SRC

   Refactoring tool php-refactor-mode
   #+BEGIN_SRC emacs-lisp
   (use-package php-refactor-mode :ensure t :defer t :init (add-hook 'php-mode-hook #'php-refactor-mode))   
   #+END_SRC

   PHPUnit for tests, boris for repl, phpcbf for autoformatting.
   #+BEGIN_SRC emacs-lisp
   (use-package phpunit :ensure t :defer t)
   (use-package phpcbf :defer t :ensure t :config (setq phpcbf-standard 'PSR2))
   (use-package php-boris :defer t)
   (use-package phan :defer t)
   (use-package fluca-php :load-path "site-lisp/")
   #+END_SRC
** Javascript
   js2-mode, js-comint and tern.
   #+BEGIN_SRC emacs-lisp
     (use-package tern :ensure t :defer t :init (add-hook 'js2-mode-hook #'tern-mode) (add-hook 'web-mode-hook #'tern-mode))
     (use-package company-tern :ensure t :defer t :after tern :config (add-to-list 'company-backends 'company-tern))
     (use-package js2-mode :ensure t :defer t :mode "\\.js\\'" :interpreter "node" :config (setq js2-basic-offset 2))
     (use-package js-comint :disabled :ensure t :defer t :after js2-mode
       :bind (:map js2-mode-map
                   ("C-x C-e" . js-send-last-sexp)
                   ("C-M-x" . js-send-last-sexp-and-go)
                   ("C-c C-b" . js-send-buffer-and-go)
                   ("C-c l" . js-load-file-and-go)))
     (use-package js2-refactor :ensure t :defer t :init (add-hook 'js2-mode-hook #'js2-refactor-mode)
       :config (js2r-add-keybindings-with-prefix "C-c C-m"))

   #+END_SRC
** Python
   Elpy is good to me.
   #+BEGIN_SRC emacs-lisp
     (use-package elpy :disabled :defer t :ensure t
       :init
       (elpy-enable)
       (setq elpy-rpc-python-command "python3")
       (setq python-shell-interpreter "python3"))
   #+END_SRC
* Useful Packages
  Autocompletion.
  #+BEGIN_SRC emacs-lisp
    (use-package company :ensure t 
      :config
      (global-company-mode)
      (setq company-dabbrev-downcase nil))
    (use-package which-key :ensure t :init (which-key-mode 1))
    (use-package counsel :ensure t
      :init (ivy-mode 1)
      :config
      (global-set-key (kbd "C-s") 'swiper)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-find-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (setq magit-completing-read-function 'ivy-completing-read))
  #+END_SRC
  Flycheck for syntax checking.
  #+BEGIN_SRC emacs-lisp
    (use-package flycheck :ensure t
      :init (global-flycheck-mode)
      :config
      (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc)))
  #+END_SRC
  Some other useful packages..
  #+BEGIN_SRC emacs-lisp
    (use-package eldoc :config (global-eldoc-mode))
    (use-package json-mode :ensure t :defer t)
    (use-package csv-mode :ensure t :defer t)
    (use-package markdown-mode :ensure t :defer t )
  #+END_SRC
* Org
  Org mode is wonderful. Org trello is helpful.
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure org-plus-contrib
      :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c c" . org-capture)
           ("C-c b" . org-iswitchb))
      :init (setq org-directory "~/orgfiles"
                  org-default-notes-file (concat org-directory "/notes.org")
                  org-capture-templates '(("t" "Task" entry (file+headline "~/orgfiles/todo.org" "Tasks")
                                           "* TODO %?\n  %i\n  %a")
                                          ("e" "Calendar Event" entry (file "~/orgfiles/gcal.org")
                                           "* %?\n\n%^T\n\n")
                                          ("o" "Trello Card" entry (file "~/orgfiles/trello.org")
                                           "* To-Do %?\n %i\n %a"))))
    (use-package org-trello :ensure t :defer t :config (setq org-trello-current-prefix-keybinding "C-c o"))
  #+END_SRC
* Git Integration
  Magit and magithub are must haves.
  #+BEGIN_SRC emacs-lisp
  (use-package magit :ensure t :defer t :bind (("C-x g" . magit-status)))
  (use-package magithub :ensure t :defer t :after magit :config (magithub-feature-autoinject t))
  #+END_SRC
* Preferences
  I use a =custom.el= file to keep =init.el= clean.
  #+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  (load custom-file)
  #+END_SRC
  I use a backup directory to keep =~= files from cluttering the directories.
  #+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
  #+END_SRC
  Some preferences include no startup screen, spaces instead of tabs, using y and n to answer yes/no prompts, and showing matching parentheses.
  #+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
  (setq-default indent-tabs-mode nil)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<s-up>") 'toggle-frame-fullscreen)
  (show-paren-mode)  
  #+END_SRC
  Current theme is Challenger Deep.
  #+BEGIN_SRC emacs-lisp
  (use-package challenger-deep-theme :ensure t)
  #+END_SRC
  Undo Tree is pretty cool.
  #+BEGIN_SRC emacs-lisp
  (use-package undo-tree :ensure t :init (global-undo-tree-mode t))
  #+END_SRC
