#+TITLE: emacs config
#+AUTHOR: Martin

* General Keybinds and Preferences
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<s-up>") 'toggle-frame-fullscreen)
  (show-paren-mode)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups/")))
  ;; Zenburn
  (use-package zenburn-theme
    :ensure t)
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :bind (("C-c l" . org-store-link)
	   ("C-c a" . org-agenda)
	   ("C-c c" . org-capture)
	   ("C-c b" . org-iswitchb))
    :init
    (setq org-directory "~/orgfiles"
	  org-default-notes-file (concat org-directory "/notes.org")
	  org-capture-templates '(("t" "Task" entry (file "~/orgfiles/tasks.org")
				   "* TODO %?\n  %i\n  %a")
				  ("e" "Calendar Event" entry (file "~/orgfiles/gcal.org")
				   "* %?\n\n%^T\n\n")
				  ("o" "Trello Card" entry (file "~/orgfiles/trello.org")
				   "* To-Do %?\n %i\n %a")))
    )

  (use-package org-trello
    :ensure t
    :defer t
    :init
    (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))
    :config
    (setq org-trello-current-prefix-keybinding "C-c o"))
#+END_SRC
* Autocompletion, Syntax Checking, Documentation
  Company, FlyCheck and ElDoc
#+BEGIN_SRC emacs-lisp
  ;; Company
  (use-package company
    :ensure t
    :config
    (global-company-mode)
    (setq company-dabbrev-downcase nil)
    )
  ;; Column Enforce
  (use-package column-enforce-mode :defer t :ensure t)

  ;; Flycheck
  (use-package flycheck
    :ensure t
    :init
    (global-flycheck-mode)
    )

  (use-package eldoc
    :config
    (global-eldoc-mode))

#+END_SRC
* Git Integration
  Magit and magithub.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-x g" . magit-status)))
  (use-package magithub
    :after magit
    :config (magithub-feature-autoinject t))
#+END_SRC
* Coding
** PHP
   php-mode, php-auto-yasnippets, php-refactor-mode are the most useful ones in this code block.
#+BEGIN_SRC emacs-lisp
  (use-package php-auto-yasnippets
    :defer t
    :ensure t
    :after php-mode
    :bind (:map php-mode-map
		("C-c C-y" . yas/create-php-snippet))
    )

  (use-package php-refactor-mode :defer t)

  (use-package phpcbf :ensure t
    :config
    (setq phpcbf-standard 'PSR2))

  (use-package phpunit :ensure t :defer t)

  (use-package phan :defer t)

  (use-package ggtags :ensure t)

  (use-package php-boris :ensure t)

  (use-package php-mode :defer t :ensure t :mode "\\.php$"
    :init
    (add-hook 'php-mode-hook
	      (lambda ()
		(php-refactor-mode)
		(ggtags-mode)
		(php-eldoc-enable)
		(php-enable-psr2-coding-style)
		(column-enforce-mode)
		(setq company-dabbrev-downcase nil)
		(add-to-list 'company-backends '(company-gtags php-extras-company company-keywords company-abbrev company-files))
		)
	      )
    )

  (use-package fluca-php
    :load-path "site-lisp/")
#+END_SRC
** Javascript
   js2-mode and company-tern.
#+BEGIN_SRC emacs-lisp
  (use-package company-tern
    :ensure t
    :defer t
    )

  (use-package js2-mode
    :ensure t
    :defer t
    :mode "\\.js\\'"
    :interpreter "node"
    :init
    (add-hook 'js2-mode-hook (lambda ()
			       (tern-mode)
			       (column-enforce-mode)))
    :config
    (setq js2-basic-offset 2)
    (add-to-list 'company-backends 'company-tern))
#+END_SRC
** Python
   Elpy is good to me.
   #+BEGIN_SRC emacs-lisp
     (use-package elpy
       :defer t
       :ensure t
       :interpreter "python3"
       :config
       (elpy-enable))


   #+END_SRC
** Other file formats
JSON, CSV, MD
#+BEGIN_SRC emacs-lisp
(use-package json-mode :ensure t :defer t)
(use-package csv-mode :ensure t :defer t)
(use-package markdown-mode :ensure t :defer t )
#+END_SRC
